name: sep490
services:
  discovery-server:
    image: ${IMAGE_PREFIX:-trinhhoangnhatminh123}/discovery-server:${IMAGE_TAG:-latest}
    container_name: discovery-server
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DISCOVERY_PORT: ${DISCOVERY_PORT:-8761}
      TZ: ${TZ:-Asia/Ho_Chi_Minh}
    ports:
      - "${DISCOVERY_PORT:-8761}:8761"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks: [sep490-net]
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6380:6379"
    networks: [sep490-net]
    restart: unless-stopped

  rookie-service:
    image: ${IMAGE_PREFIX:-trinhhoangnhatminh123}/rookie-service:${IMAGE_TAG:-latest}
    container_name: rookie-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CACHE_TYPE: simple
      FIREBASE_CREDENTIALS_PATH: /app/firebase.json
      ROOKIE_PORT: ${ROOKIE_PORT:-8081}
      EUREKA_URL: http://discovery-server:8761/eureka
      TZ: ${TZ:-Asia/Ho_Chi_Minh}
      DB_URL: jdbc:sqlserver://mssql:1433;databaseName=rookie_db;encrypt=true;trustServerCertificate=true
      DB_USERNAME: sa
      DB_PASSWORD: ${MSSQL_SA_PASSWORD}
      DB_DRIVER: com.microsoft.sqlserver.jdbc.SQLServerDriver
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      discovery-server:
        condition: service_healthy
      mssql:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "${ROOKIE_PORT:-8081}:8081"
    networks: [sep490-net]
    volumes:
      - ./firebase-service-account.json:/app/firebase.json:ro
    restart: unless-stopped

  ar-service:
    image: ${IMAGE_PREFIX:-trinhhoangnhatminh123}/ar-service:${IMAGE_TAG:-latest}
    container_name: ar-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CACHE_TYPE: simple
      AR_PORT: ${AR_PORT:-8083}
      EUREKA_URL: http://discovery-server:8761/eureka
      TZ: ${TZ:-Asia/Ho_Chi_Minh}
      DB_URL: jdbc:sqlserver://mssql:1433;databaseName=rookie_db;encrypt=true;trustServerCertificate=true
      DB_USERNAME: sa
      DB_PASSWORD: ${MSSQL_SA_PASSWORD}
      DB_DRIVER: com.microsoft.sqlserver.jdbc.SQLServerDriver
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      discovery-server:
        condition: service_healthy
      mssql:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "${AR_PORT:-8083}:8083"
    networks: [sep490-net]
    restart: unless-stopped

  api-gateway:
    image: ${IMAGE_PREFIX:-trinhhoangnhatminh123}/api-gateway:${IMAGE_TAG:-latest}
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      GATEWAY_PORT: ${GATEWAY_PORT:-8080}
      EUREKA_URL: http://discovery-server:8761/eureka
      TZ: ${TZ:-Asia/Ho_Chi_Minh}
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    depends_on:
      discovery-server:
        condition: service_healthy
      rookie-service:
        condition: service_started
      ar-service:
        condition: service_started
    networks: [sep490-net]
    restart: unless-stopped

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      MSSQL_PID: "Express"
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P '${MSSQL_SA_PASSWORD}' -C -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks: [sep490-net]
    restart: unless-stopped

  mssql-bootstrap:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      mssql:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        /opt/mssql-tools18/bin/sqlcmd -S mssql -U sa -P "${MSSQL_SA_PASSWORD}" -C \
        -Q "IF DB_ID('rookie_db') IS NULL CREATE DATABASE rookie_db;"
    environment:
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
    networks: [sep490-net]
    restart: "no"

networks:
  sep490-net:
    driver: bridge

volumes:
  mssql_data: