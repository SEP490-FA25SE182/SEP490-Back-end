name: sep490
services:
  discovery-server:
    build:
      context: ./discovery-server
    pull_policy: build
    image: ${IMAGE_PREFIX:-local}/discovery-server:${IMAGE_TAG:-dev}
    container_name: discovery-server
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DISCOVERY_PORT: ${DISCOVERY_PORT:-8761}
      TZ: ${TZ:-Asia/Ho_Chi_Minh}
    ports:
      - "${DISCOVERY_PORT:-8761}:8761"
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks: [sep490-net]

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6380:6379"
    networks: [ sep490-net ]

  rookie-service:
    build:
      context: ./rookie-service
      dockerfile: ./Dockerfile
    pull_policy: build
    image: ${IMAGE_PREFIX:-local}/rookie-service:${IMAGE_TAG:-dev}
    container_name: rookie-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CACHE_TYPE: simple
      FIREBASE_CREDENTIALS_PATH: /app/firebase.json
      ROOKIE_PORT: ${ROOKIE_PORT:-8081}
      EUREKA_URL: http://discovery-server:8761/eureka
      TZ: ${TZ:-Asia/Ho_Chi_Minh}

      # DB á»Ÿ stack db (host: mssql)
      DB_URL: jdbc:sqlserver://mssql:1433;databaseName=rookie_db;encrypt=true;trustServerCertificate=true
      DB_USERNAME: sa
      DB_PASSWORD: ${MSSQL_SA_PASSWORD}
      DB_DRIVER: com.microsoft.sqlserver.jdbc.SQLServerDriver

      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      discovery-server:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "${ROOKIE_PORT:-8081}:8081"
    networks: [sep490-net]
    volumes:
      - ./rookie-service/src/main/resources/firebase-service-account.json:/app/firebase.json:ro

  ai-service:
    build:
      context: ./ai-service
      dockerfile: ./Dockerfile
    pull_policy: build
    image: ${IMAGE_PREFIX:-local}/ai-service:${IMAGE_TAG:-dev}
    container_name: ai-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CACHE_TYPE: simple
      STORAGE_BASE_DIR: /data/illustrations
      FIREBASE_CREDENTIALS_PATH: /app/firebase.json
      STABILITY_ENABLED: "false"
      STABILITY_KEY: ${STABILITY_KEY}
      AI_PORT: ${AI_PORT:-8082}
      EUREKA_URL: http://discovery-server:8761/eureka
      TZ: ${TZ:-Asia/Ho_Chi_Minh}

      DB_URL: jdbc:sqlserver://mssql:1433;databaseName=rookie_db;encrypt=true;trustServerCertificate=true
      DB_USERNAME: sa
      DB_PASSWORD: ${MSSQL_SA_PASSWORD}
      DB_DRIVER: com.microsoft.sqlserver.jdbc.SQLServerDriver

      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      discovery-server:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "${AI_PORT:-8082}:8082"
    networks: [sep490-net]
    volumes:
      - ./_ai_data:/data/illustrations
      - ./ai-service/src/main/resources/firebase-service-account.json:/app/firebase.json:ro

  ar-service:
    build:
      context: ./ar-service
      dockerfile: ./Dockerfile
    pull_policy: build
    image: ${IMAGE_PREFIX:-local}/ar-service:${IMAGE_TAG:-dev}
    container_name: ar-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CACHE_TYPE: simple
      AR_PORT: ${AR_PORT:-8083}
      EUREKA_URL: http://discovery-server:8761/eureka
      TZ: ${TZ:-Asia/Ho_Chi_Minh}

      DB_URL: jdbc:sqlserver://mssql:1433;databaseName=rookie_db;encrypt=true;trustServerCertificate=true
      DB_USERNAME: sa
      DB_PASSWORD: ${MSSQL_SA_PASSWORD}
      DB_DRIVER: com.microsoft.sqlserver.jdbc.SQLServerDriver

      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      discovery-server:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "${AR_PORT:-8083}:8083"
    networks: [sep490-net]

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    pull_policy: build
    image: ${IMAGE_PREFIX:-local}/api-gateway:${IMAGE_TAG:-dev}
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      GATEWAY_PORT: ${GATEWAY_PORT:-8080}
      EUREKA_URL: http://discovery-server:8761/eureka
      TZ: ${TZ:-Asia/Ho_Chi_Minh}
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    depends_on:
      discovery-server:
        condition: service_started
      rookie-service:
        condition: service_started
      ai-service:
        condition: service_started
      ar-service:
        condition: service_started
    networks: [sep490-net]

networks:
  sep490-net:
    external: true

volumes:
  uploads_data:
